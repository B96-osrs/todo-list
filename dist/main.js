(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,":root {\n    --primary:#1f2937;\n    --secondary:#C9A959;\n    --myGrey:#CFCECA;\n\n}\n\n.icon {\n    width: 32px;\n    height: 32px;\n}\n.icon:hover {\n    cursor: pointer;\n    transform: scale(1.075);\n}\n\n\nbody {\n    box-sizing: border-box;\n    height: 100vh;\n    margin: 0;\n}\n\n.content {\n    display: grid;\n    grid-template-columns: 240px 1fr;\n}\n\n.sidebar {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    color: white;\n    padding-left: 24px;\n    gap: 12px;\n}\n\n.add-button {\n    border-style: none;\n    padding: 12px;\n    background-color: var(--secondary);\n    width: 100px;\n    cursor: pointer;\n\n}\n.add-button:hover {\n   transform: scale(1.08);\n}\n\n.project-list {\n    font-size: 18px;\n}\n\n.card-container {\n    padding: 24px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(15em, 20em));\n    gap: 12px;\n}\n\n.todo-card {\n    height: fit-content;\n    color: white;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    padding: 12px;\n    border-radius: 12px;\n    gap: 8px;\n    background-color: rgba(0, 0, 0, 0.6);\n    border-left: solid;\n    border-width: 0.8em;\n}\n.project-title {\n    padding: 24px;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n.project:hover {\n    color: var(--secondary);\n    cursor: pointer;\n    transform: scale(1.05);\n}\n\n.project-header {\n    display: flex;\n    background-color: #C9A959;\n}\n.project-title {\n    margin-right: auto;\n}\n\n.project-form,\n#todo-form {\n    display: flex;\n    width: 300px;\n    background-color:var(--primary);\n    color: white;\n    flex-direction: column;\n    gap: 12px;\n    padding: 32px;\n    border-radius: 16px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n    box-shadow: 6px 6px 12px 1px;\n}\n\n#todo-description {\n    width: 90%;\n    overflow: hidden;\n    white-space: nowrap;\n    height: 1.2em;\n    text-overflow: ellipsis;\n}\n#todo-description:hover {\n    width: 100%;\n    height: auto;\n    white-space: wrap;\n    overflow: auto;\n    text-overflow: clip;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;;AAEpB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;AACA;IACI,eAAe;IACf,uBAAuB;AAC3B;;;AAGA;IACI,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,gCAAgC;AACpC;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,gCAAgC;IAChC,YAAY;IACZ,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,kCAAkC;IAClC,YAAY;IACZ,eAAe;;AAEnB;AACA;GACG,sBAAsB;AACzB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,2DAA2D;IAC3D,SAAS;AACb;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,oCAAoC;IACpC,kBAAkB;IAClB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,yBAAyB;AAC7B;AACA;IACI,kBAAkB;AACtB;;AAEA;;IAEI,aAAa;IACb,YAAY;IACZ,+BAA+B;IAC/B,YAAY;IACZ,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,+BAA+B;IAC/B,4BAA4B;AAChC;;AAEA;IACI,UAAU;IACV,gBAAgB;IAChB,mBAAmB;IACnB,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,cAAc;IACd,mBAAmB;AACvB",sourcesContent:[":root {\n    --primary:#1f2937;\n    --secondary:#C9A959;\n    --myGrey:#CFCECA;\n\n}\n\n.icon {\n    width: 32px;\n    height: 32px;\n}\n.icon:hover {\n    cursor: pointer;\n    transform: scale(1.075);\n}\n\n\nbody {\n    box-sizing: border-box;\n    height: 100vh;\n    margin: 0;\n}\n\n.content {\n    display: grid;\n    grid-template-columns: 240px 1fr;\n}\n\n.sidebar {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background-color: var(--primary);\n    color: white;\n    padding-left: 24px;\n    gap: 12px;\n}\n\n.add-button {\n    border-style: none;\n    padding: 12px;\n    background-color: var(--secondary);\n    width: 100px;\n    cursor: pointer;\n\n}\n.add-button:hover {\n   transform: scale(1.08);\n}\n\n.project-list {\n    font-size: 18px;\n}\n\n.card-container {\n    padding: 24px;\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(15em, 20em));\n    gap: 12px;\n}\n\n.todo-card {\n    height: fit-content;\n    color: white;\n    font-size: 16px;\n    display: flex;\n    flex-direction: column;\n    padding: 12px;\n    border-radius: 12px;\n    gap: 8px;\n    background-color: rgba(0, 0, 0, 0.6);\n    border-left: solid;\n    border-width: 0.8em;\n}\n.project-title {\n    padding: 24px;\n    font-size: 24px;\n    font-weight: bold;\n}\n\n.project:hover {\n    color: var(--secondary);\n    cursor: pointer;\n    transform: scale(1.05);\n}\n\n.project-header {\n    display: flex;\n    background-color: #C9A959;\n}\n.project-title {\n    margin-right: auto;\n}\n\n.project-form,\n#todo-form {\n    display: flex;\n    width: 300px;\n    background-color:var(--primary);\n    color: white;\n    flex-direction: column;\n    gap: 12px;\n    padding: 32px;\n    border-radius: 16px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%,-50%);\n    box-shadow: 6px 6px 12px 1px;\n}\n\n#todo-description {\n    width: 90%;\n    overflow: hidden;\n    white-space: nowrap;\n    height: 1.2em;\n    text-overflow: ellipsis;\n}\n#todo-description:hover {\n    width: 100%;\n    height: auto;\n    white-space: wrap;\n    overflow: auto;\n    text-overflow: clip;\n}\n"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);o&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],d=0;d<e.length;d++){var c=e[d],l=o.base?c[0]+o.base:c[0],p=i[l]||0,s="".concat(l," ").concat(p);i[l]=p+1;var A=n(s),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var m=r(u,o);o.byIndex=d,t.splice(d,0,{identifier:s,updater:m,references:1})}a.push(s)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=n(i[a]);t[d].references--}for(var c=o(e,r),l=0;l<i.length;l++){var p=n(i[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{function e(e){return{name:e,todoArray:[]}}function t(e,t,n,o){return{title:e,description:t,dueDate:n,priority:o,checkBox:!1}}const o=n.p+"995e12dd39ac55d7358b.svg",r=n.p+"0b21fd5021d385750ac3.svg",i={displayProjectList:function(e,t){e.innerHTML="";for(let n=0;n<t.length;n++){let o=document.createElement("div");o.classList.add("project"),o.setAttribute("data-key",n),o.textContent=t[n].name,e.appendChild(o)}},showProjectModal:function(e){let t=document.createElement("div");t.classList.add("project-form"),e.appendChild(t);let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","project-input");let o=document.createElement("label");o.setAttribute("for","project-input"),o.textContent="Project Name";let r=document.createElement("button");r.setAttribute("id","submit-button"),r.textContent="Add Project",t.appendChild(o),t.appendChild(n),t.appendChild(r)},showTodoItemModal:function(e){let t=document.createElement("div");t.setAttribute("id","todo-form"),e.appendChild(t);let n=document.createElement("label");n.setAttribute("for","todo-title"),n.textContent="Title";let o=document.createElement("input");o.setAttribute("type","text"),o.setAttribute("id","todo-title");let r=document.createElement("label");r.setAttribute("for","todo-description"),r.textContent="Description";let i=document.createElement("input");i.setAttribute("type","text"),i.setAttribute("id","todo-description");let a=document.createElement("label");a.setAttribute("for","todo-date"),a.textContent="Due Date";let d=document.createElement("input");d.setAttribute("type","date"),d.setAttribute("id","todo-date"),d.setAttribute("value","2024-01-01");let c=document.createElement("label");c.setAttribute("for","todo-priority"),c.textContent="Priority";let l=document.createElement("select");l.setAttribute("id","todo-priority");let p=document.createElement("option");l.appendChild(p),p.textContent="low";let s=document.createElement("option");s.textContent="high",l.appendChild(s);let A=document.createElement("button");A.setAttribute("id","submit-button"),A.textContent="Add Todo",t.appendChild(n),t.appendChild(o),t.appendChild(r),t.appendChild(i),t.appendChild(a),t.appendChild(d),t.appendChild(c),t.appendChild(l),t.appendChild(A)},hidePopup:function(){let e=document.querySelector(".content");e.removeChild(e.lastChild)},updateMainContainer:function(e,t){!function(e){e.innerHTML=""}(e),function(e,t){let n=document.createElement("div");n.classList.add("project-header"),e.appendChild(n);let o=document.createElement("div");o.classList.add("project-title"),o.textContent=t.name;let r=document.createElement("button");r.classList.add("delete-button"),r.textContent="Delete Project";let i=document.createElement("button");i.setAttribute("id","add-todo-button"),i.textContent="Add To-do List",n.appendChild(o),"General"!==t.name&&n.appendChild(r),n.appendChild(i)}(e,t),function(e,t){let n=document.createElement("div");n.classList.add("card-container"),e.appendChild(n);let i=0;t.todoArray.forEach((e=>{let t=document.createElement("div");t.classList.add("todo-card"),t.setAttribute("data-key",i),n.appendChild(t),function(e,t){let n=document.createElement("div");n.textContent=t.title;let i=document.createElement("div");i.setAttribute("id","todo-description"),i.textContent=t.description;let a=document.createElement("div");a.textContent=t.dueDate;let d=document.createElement("div");d.textContent="Priority: "+t.priority;let c=document.createElement("div"),l=document.createElement("img");l.classList.add("icon"),l.setAttribute("id","todo-check"),l.setAttribute("data-key",e.dataset.key),l.src=r;let p=document.createElement("img");p.classList.add("icon"),p.setAttribute("id","todo-delete"),p.setAttribute("data-key",e.dataset.key),p.src=o,c.appendChild(l),c.appendChild(p),e.appendChild(n),e.appendChild(a),e.appendChild(d),e.appendChild(i),e.appendChild(c)}(t,e),i++,console.log("element priority: "+e.priority),"high"===e.priority?t.style.borderColor="red":"low"===e.priority&&(t.style.borderColor="orange"),"true"===e.checkBox&&(t.style.borderColor="green")}))}(e,t),console.log("maincontainer updated")},highlightCurrentProject:function(e){let t=document.querySelectorAll(".project");t.forEach((e=>{e.style.color="white"})),t[e].style.color="green"}};var a=n(379),d=n.n(a),c=n(795),l=n.n(c),p=n(569),s=n.n(p),A=n(565),u=n.n(A),m=n(216),h=n.n(m),C=n(589),f=n.n(C),g=n(426),b={};b.styleTagTransform=f(),b.setAttributes=u(),b.insert=s().bind(null,"head"),b.domAPI=l(),b.insertStyleElement=h(),d()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;const y=document.querySelector(".content"),x=document.querySelector(".project-list"),v=document.querySelector(".main-container"),I=document.getElementById("project-button");let B=[],E=0;function w(){if(localStorage.clear(),B.length>0)for(let e=0;e<B.length;e++)localStorage.setItem(e,JSON.stringify(B[e]))}console.log("start:"),localStorage.length<1&&(B[0]=e("General"),B[1]=e("Project-1"),B[2]=e("Project-2"),B[0].todoArray[0]=t("Homework","Finish the To-do Project from the JS Path using vanilla JS, HTML and CSS","15.07.2023","high"),B[0].todoArray[1]=t("Project","Implement xy features","20.11.2023","low"),B[1].todoArray[0]=t("Reading","Read article xzy","15.11.2024","low"),B[2].todoArray[0]=t("Airport pickup","Pick up Odin from the airport","11.08.2023","high"),console.log("local: "+localStorage),console.log("project: "+B)),function(){for(let e=0;e<localStorage.length;e++){let t=localStorage.getItem(localStorage.key(e));B[e]=JSON.parse(t)}}(),console.log(B[0].name),B.length>0&&(console.log(B.length),i.displayProjectList(x,B),i.updateMainContainer(v,B[0]),i.highlightCurrentProject(E)),window.addEventListener("click",(function(e){if(e.target.matches(".project")){let t=parseInt(e.target.dataset.key);i.updateMainContainer(v,B[t]),console.log("xyz: "+B[E]),E=t,console.log("current project index: "+E),i.highlightCurrentProject(E)}})),I.addEventListener("click",(function(t){console.log("new project clicked"),i.showProjectModal(y),document.getElementById("submit-button").addEventListener("click",(function(t){let n=document.getElementById("project-input");""===n.value?function(e){let t=document.querySelector(".project-form"),n=document.createElement("div");n.setAttribute("style","font-size: 0.8em; color:#ff0000;"),n.textContent="Please enter Project Name",t.appendChild(n)}():(B.push(e(n.value)),w(),console.log(B),E=B.length-1,i.displayProjectList(x,B),i.updateMainContainer(v,B[E]),i.hidePopup(),console.log("current project index: "+E),i.highlightCurrentProject(E))}))})),v.addEventListener("click",(function(e){e.target.matches(".delete-button")&&E>0&&(B.splice(E,1),console.log(B),E=0,i.displayProjectList(x,B),i.updateMainContainer(v,B[E]),i.highlightCurrentProject(E),w())})),v.addEventListener("click",(function(e){e.target.matches("#add-todo-button")&&(i.showTodoItemModal(y),document.getElementById("submit-button").addEventListener("click",(function(e){!function(){let e=t(document.getElementById("todo-title").value,document.getElementById("todo-description").value,document.getElementById("todo-date").value,document.getElementById("todo-priority").value);B[E].todoArray.push(e)}(),i.hidePopup(),i.updateMainContainer(v,B[E]),w()})))})),v.addEventListener("click",(function(e){if(e.target.matches("#todo-delete")){let t=parseInt(e.target.dataset.key);B[E].todoArray.splice(t,1),i.updateMainContainer(v,B[E]),w()}else if(e.target.matches("#todo-check")){let t=parseInt(e.target.dataset.key);"false"===B[E].todoArray[t].checkBox.toString()?B[E].todoArray[t].checkBox="true":B[E].todoArray[t].checkBox="false",i.updateMainContainer(v,B[E]),w()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGVBQWUsaUJBQWlCYyxPQUc3RHhFLEVBQWFrRCxHQUFnQjVELFVBQVVwSSxLQUFLME4sRUFDaEQsQ0F6Q1lDLEdBQ0FoRixFQUFrQjJCLFlBQ2xCM0IsRUFBa0I4QixvQkFBb0I2QixFQUFleEQsRUFBYWtELElBQ2xFUyxHQUNKLElBR1IsSUFFQUgsRUFBY1csaUJBQWlCLFNBQVMsU0FBU3RJLEdBQzdDLEdBQUdBLEVBQUVSLE9BQU8rSSxRQUFRLGdCQUFpQixDQUNqQyxJQUFJdEosRUFBUXdKLFNBQVN6SSxFQUFFUixPQUFPcUgsUUFBUTdFLEtBQ3RDbUMsRUFBYWtELEdBQWdCNUQsVUFBVWhGLE9BQU9RLEVBQU0sR0FDcEQrRSxFQUFrQjhCLG9CQUFvQjZCLEVBQWN4RCxFQUFha0QsSUFDakVTLEdBQ0osTUFDSyxHQUFHOUgsRUFBRVIsT0FBTytJLFFBQVEsZUFBZ0IsQ0FDckMsSUFBSXRKLEVBQVF3SixTQUFTekksRUFBRVIsT0FBT3FILFFBQVE3RSxLQUNxQyxVQUF2RW1DLEVBQWFrRCxHQUFnQjVELFVBQVV4RSxHQUFlLFNBQUV0RCxXQUN4RHdJLEVBQWFrRCxHQUFnQjVELFVBQVV4RSxHQUFPOEUsU0FBVyxPQUd6REksRUFBYWtELEdBQWdCNUQsVUFBVXhFLEdBQU84RSxTQUFXLFFBRTdEQyxFQUFrQjhCLG9CQUFvQjZCLEVBQWN4RCxFQUFha0QsSUFDakVTLEdBQ0osQ0FHSixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9wcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy90b2RvLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9kaXNwbGF5Q29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdCB7XG4gICAgLS1wcmltYXJ5OiMxZjI5Mzc7XG4gICAgLS1zZWNvbmRhcnk6I0M5QTk1OTtcbiAgICAtLW15R3JleTojQ0ZDRUNBO1xuXG59XG5cbi5pY29uIHtcbiAgICB3aWR0aDogMzJweDtcbiAgICBoZWlnaHQ6IDMycHg7XG59XG4uaWNvbjpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wNzUpO1xufVxuXG5cbmJvZHkge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICBtYXJnaW46IDA7XG59XG5cbi5jb250ZW50IHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMjQwcHggMWZyO1xufVxuXG4uc2lkZWJhciB7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpbWFyeSk7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmctbGVmdDogMjRweDtcbiAgICBnYXA6IDEycHg7XG59XG5cbi5hZGQtYnV0dG9uIHtcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XG4gICAgcGFkZGluZzogMTJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkpO1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbn1cbi5hZGQtYnV0dG9uOmhvdmVyIHtcbiAgIHRyYW5zZm9ybTogc2NhbGUoMS4wOCk7XG59XG5cbi5wcm9qZWN0LWxpc3Qge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbn1cblxuLmNhcmQtY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAyNHB4O1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxNWVtLCAyMGVtKSk7XG4gICAgZ2FwOiAxMnB4O1xufVxuXG4udG9kby1jYXJkIHtcbiAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDEycHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICBnYXA6IDhweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7XG4gICAgYm9yZGVyLWxlZnQ6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMC44ZW07XG59XG4ucHJvamVjdC10aXRsZSB7XG4gICAgcGFkZGluZzogMjRweDtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5wcm9qZWN0OmhvdmVyIHtcbiAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5KTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA1KTtcbn1cblxuLnByb2plY3QtaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNDOUE5NTk7XG59XG4ucHJvamVjdC10aXRsZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufVxuXG4ucHJvamVjdC1mb3JtLFxuI3RvZG8tZm9ybSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMzAwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wcmltYXJ5KTtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBnYXA6IDEycHg7XG4gICAgcGFkZGluZzogMzJweDtcbiAgICBib3JkZXItcmFkaXVzOiAxNnB4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwtNTAlKTtcbiAgICBib3gtc2hhZG93OiA2cHggNnB4IDEycHggMXB4O1xufVxuXG4jdG9kby1kZXNjcmlwdGlvbiB7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgaGVpZ2h0OiAxLjJlbTtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cbiN0b2RvLWRlc2NyaXB0aW9uOmhvdmVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgd2hpdGUtc3BhY2U6IHdyYXA7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsZ0JBQWdCOztBQUVwQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsdUJBQXVCO0FBQzNCOzs7QUFHQTtJQUNJLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsU0FBUztBQUNiOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLGFBQWE7SUFDYixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGdDQUFnQztJQUNoQyxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2Isa0NBQWtDO0lBQ2xDLFlBQVk7SUFDWixlQUFlOztBQUVuQjtBQUNBO0dBQ0csc0JBQXNCO0FBQ3pCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixhQUFhO0lBQ2IsMkRBQTJEO0lBQzNELFNBQVM7QUFDYjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osZUFBZTtJQUNmLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixRQUFRO0lBQ1Isb0NBQW9DO0lBQ3BDLGtCQUFrQjtJQUNsQixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGFBQWE7SUFDYixlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IseUJBQXlCO0FBQzdCO0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7O0lBRUksYUFBYTtJQUNiLFlBQVk7SUFDWiwrQkFBK0I7SUFDL0IsWUFBWTtJQUNaLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFNBQVM7SUFDVCwrQkFBK0I7SUFDL0IsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsY0FBYztJQUNkLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAgIC0tcHJpbWFyeTojMWYyOTM3O1xcbiAgICAtLXNlY29uZGFyeTojQzlBOTU5O1xcbiAgICAtLW15R3JleTojQ0ZDRUNBO1xcblxcbn1cXG5cXG4uaWNvbiB7XFxuICAgIHdpZHRoOiAzMnB4O1xcbiAgICBoZWlnaHQ6IDMycHg7XFxufVxcbi5pY29uOmhvdmVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDc1KTtcXG59XFxuXFxuXFxuYm9keSB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXFxuLmNvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDI0MHB4IDFmcjtcXG59XFxuXFxuLnNpZGViYXIge1xcbiAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDI0cHg7XFxuICAgIGdhcDogMTJweDtcXG59XFxuXFxuLmFkZC1idXR0b24ge1xcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDEycHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeSk7XFxuICAgIHdpZHRoOiAxMDBweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbn1cXG4uYWRkLWJ1dHRvbjpob3ZlciB7XFxuICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA4KTtcXG59XFxuXFxuLnByb2plY3QtbGlzdCB7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG59XFxuXFxuLmNhcmQtY29udGFpbmVyIHtcXG4gICAgcGFkZGluZzogMjRweDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgxNWVtLCAyMGVtKSk7XFxuICAgIGdhcDogMTJweDtcXG59XFxuXFxuLnRvZG8tY2FyZCB7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nOiAxMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgICBnYXA6IDhweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO1xcbiAgICBib3JkZXItbGVmdDogc29saWQ7XFxuICAgIGJvcmRlci13aWR0aDogMC44ZW07XFxufVxcbi5wcm9qZWN0LXRpdGxlIHtcXG4gICAgcGFkZGluZzogMjRweDtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLnByb2plY3Q6aG92ZXIge1xcbiAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5KTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQzlBOTU5O1xcbn1cXG4ucHJvamVjdC10aXRsZSB7XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG59XFxuXFxuLnByb2plY3QtZm9ybSxcXG4jdG9kby1mb3JtIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgd2lkdGg6IDMwMHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXByaW1hcnkpO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogMTJweDtcXG4gICAgcGFkZGluZzogMzJweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTZweDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpO1xcbiAgICBib3gtc2hhZG93OiA2cHggNnB4IDEycHggMXB4O1xcbn1cXG5cXG4jdG9kby1kZXNjcmlwdGlvbiB7XFxuICAgIHdpZHRoOiA5MCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICAgIGhlaWdodDogMS4yZW07XFxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbn1cXG4jdG9kby1kZXNjcmlwdGlvbjpob3ZlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IGF1dG87XFxuICAgIHdoaXRlLXNwYWNlOiB3cmFwO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG4gICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZnVuY3Rpb24gUHJvamVjdChuYW1lKSB7XG4gICAgY29uc3QgdG9kb0FycmF5ID0gW107XG5cbiAgICByZXR1cm4ge25hbWUsIHRvZG9BcnJheX07XG59XG5cblxuZXhwb3J0IHtcbiAgICBQcm9qZWN0LFxufTsiLCJmdW5jdGlvbiB0b0RvKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHkpIHtcbiAgICBsZXQgY2hlY2tCb3ggPSBmYWxzZTtcblxuXG4gICAgcmV0dXJuIHt0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBjaGVja0JveH07XG59XG5cblxuZXhwb3J0IHtcbiAgICB0b0RvLFxufTsiLCJpbXBvcnQgaW1hZ2VUcmFzaCBmcm9tIFwiLi9pbWcvdHJhc2guc3ZnXCI7XG5pbXBvcnQgaW1hZ2VDaGVja0JveCBmcm9tIFwiLi9pbWcvY2hlY2tCb3guc3ZnXCI7XG5pbXBvcnQgZm9ybWF0LCB7IGVuZE9mRGF5IH0gZnJvbSAnZGF0ZS1mbnMnXG5cblxuY29uc3QgZGlzcGxheUNvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5UHJvamVjdExpc3QocGFyZW50LCBwcm9qZWN0QXJyYXkpIHtcbiAgICAgICAgcGFyZW50LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwcm9qZWN0QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHByb2plY3REaXYuY2xhc3NMaXN0LmFkZChcInByb2plY3RcIik7XG4gICAgICAgICAgICBwcm9qZWN0RGl2LnNldEF0dHJpYnV0ZShcImRhdGEta2V5XCIsaSk7XG4gICAgICAgICAgICBwcm9qZWN0RGl2LnRleHRDb250ZW50ID0gcHJvamVjdEFycmF5W2ldLm5hbWU7XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlUb2RvSXRlbXMocGFyZW50LCBwcm9qZWN0KSB7XG4gICAgICAgIGxldCBjYXJkQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY2FyZENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY2FyZC1jb250YWluZXJcIik7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjYXJkQ29udGFpbmVyKTtcbiAgICAgICAgbGV0IHRvZG9DYXJkSW5kZXggPSAwO1xuXG4gICAgICAgIHByb2plY3QudG9kb0FycmF5LmZvckVhY2goZWxlbWVudCA9PiB7XG5cbiAgICAgICAgICAgIGxldCB0b2RvQ2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0b2RvQ2FyZC5jbGFzc0xpc3QuYWRkKFwidG9kby1jYXJkXCIpO1xuICAgICAgICAgICAgdG9kb0NhcmQuc2V0QXR0cmlidXRlKFwiZGF0YS1rZXlcIiwgdG9kb0NhcmRJbmRleCk7XG4gICAgICAgICAgICBjYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9DYXJkKTtcblxuICAgICAgICAgICAgY3JlYXRlVG9kb0l0ZW0odG9kb0NhcmQsZWxlbWVudCk7XG4gICAgICAgICAgICB0b2RvQ2FyZEluZGV4Kys7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVsZW1lbnQgcHJpb3JpdHk6IFwiICsgZWxlbWVudC5wcmlvcml0eSk7XG4gICAgICAgICAgICBpZihlbGVtZW50LnByaW9yaXR5ID09PSBcImhpZ2hcIikge1xuICAgICAgICAgICAgICAgIHRvZG9DYXJkLnN0eWxlLmJvcmRlckNvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVsZW1lbnQucHJpb3JpdHkgPT09IFwibG93XCIpIHtcbiAgICAgICAgICAgICAgICB0b2RvQ2FyZC5zdHlsZS5ib3JkZXJDb2xvciA9IFwib3JhbmdlXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGVsZW1lbnQuY2hlY2tCb3ggPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICAgICAgdG9kb0NhcmQuc3R5bGUuYm9yZGVyQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVUb2RvSXRlbShwYXJlbnQsdG9kb0l0ZW0pIHtcbiAgICAgICAgbGV0IHRvZG9UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG9JdGVtLnRpdGxlO1xuXG4gICAgICAgIGxldCB0b2RvRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0b2RvRGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0b2RvLWRlc2NyaXB0aW9uXCIpO1xuICAgICAgICB0b2RvRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSB0b2RvSXRlbS5kZXNjcmlwdGlvbjtcblxuICAgICAgICBsZXQgdG9kb0R1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0b2RvRHVlRGF0ZS50ZXh0Q29udGVudCA9IHRvZG9JdGVtLmR1ZURhdGU7XG4gICAgICAgIGxldCB0b2RvUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0b2RvUHJpb3JpdHkudGV4dENvbnRlbnQgPSBcIlByaW9yaXR5OiBcIiArIHRvZG9JdGVtLnByaW9yaXR5O1xuXG4gICAgICAgIGxldCBpY29uRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICBsZXQgdG9kb0NoZWNrSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgIHRvZG9DaGVja0ljb24uY2xhc3NMaXN0LmFkZChcImljb25cIik7XG4gICAgICAgIHRvZG9DaGVja0ljb24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ0b2RvLWNoZWNrXCIpO1xuICAgICAgICB0b2RvQ2hlY2tJY29uLnNldEF0dHJpYnV0ZShcImRhdGEta2V5XCIscGFyZW50LmRhdGFzZXQua2V5KTtcbiAgICAgICAgdG9kb0NoZWNrSWNvbi5zcmMgPSBpbWFnZUNoZWNrQm94O1xuXG4gICAgICAgIGxldCB0b2RvVHJhc2hJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgdG9kb1RyYXNoSWNvbi5jbGFzc0xpc3QuYWRkKFwiaWNvblwiKTtcbiAgICAgICAgdG9kb1RyYXNoSWNvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwidG9kby1kZWxldGVcIik7XG4gICAgICAgIHRvZG9UcmFzaEljb24uc2V0QXR0cmlidXRlKFwiZGF0YS1rZXlcIixwYXJlbnQuZGF0YXNldC5rZXkpO1xuXG4gICAgICAgIHRvZG9UcmFzaEljb24uc3JjID0gaW1hZ2VUcmFzaDtcbiAgICAgICAgaWNvbkRpdi5hcHBlbmRDaGlsZCh0b2RvQ2hlY2tJY29uKTtcbiAgICAgICAgaWNvbkRpdi5hcHBlbmRDaGlsZCh0b2RvVHJhc2hJY29uKTtcblxuICAgICAgICBcblxuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodG9kb1RpdGxlKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRvZG9EdWVEYXRlKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRvZG9Qcmlvcml0eSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0b2RvRGVzY3JpcHRpb24pO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoaWNvbkRpdik7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5UHJvamVjdEhlYWRlcihwYXJlbnQsIHByb2plY3QpIHtcbiAgICAgICAgbGV0IHByb2plY3RIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwcm9qZWN0SGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LWhlYWRlclwiKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHByb2plY3RIZWFkZXIpO1xuXG4gICAgICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHByb2plY3ROYW1lLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LXRpdGxlXCIpO1xuICAgICAgICBwcm9qZWN0TmFtZS50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcblxuICAgICAgICBsZXQgcHJvamVjdERlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHByb2plY3REZWxldGVCdXR0b24uY2xhc3NMaXN0LmFkZChcImRlbGV0ZS1idXR0b25cIik7XG4gICAgICAgIHByb2plY3REZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0ZSBQcm9qZWN0XCI7XG5cbiAgICAgICAgbGV0IHByb2plY3RBZGRUb2RvQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgcHJvamVjdEFkZFRvZG9CdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIixcImFkZC10b2RvLWJ1dHRvblwiKTtcbiAgICAgICAgcHJvamVjdEFkZFRvZG9CdXR0b24udGV4dENvbnRlbnQgPSBcIkFkZCBUby1kbyBMaXN0XCI7XG5cblxuICAgICAgICBwcm9qZWN0SGVhZGVyLmFwcGVuZENoaWxkKHByb2plY3ROYW1lKTtcbiAgICAgICAgaWYoIShwcm9qZWN0Lm5hbWUgPT09IFwiR2VuZXJhbFwiKSkge1xuICAgICAgICAgICAgcHJvamVjdEhlYWRlci5hcHBlbmRDaGlsZChwcm9qZWN0RGVsZXRlQnV0dG9uKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9qZWN0SGVhZGVyLmFwcGVuZENoaWxkKHByb2plY3RBZGRUb2RvQnV0dG9uKTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyQ3VycmVudFByb2plY3QocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dQcm9qZWN0TW9kYWwocGFyZW50KSB7XG4gICAgICAgIGxldCBwcm9qZWN0TW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwcm9qZWN0TW9kYWwuY2xhc3NMaXN0LmFkZChcInByb2plY3QtZm9ybVwiKTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHByb2plY3RNb2RhbCk7XG5cbiAgICAgICAgbGV0IHByb2plY3RJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgcHJvamVjdElucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgICAgICBwcm9qZWN0SW5wdXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJwcm9qZWN0LWlucHV0XCIpO1xuXG4gICAgICAgIGxldCBwcm9qZWN0SW5wdXRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgcHJvamVjdElucHV0TGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJwcm9qZWN0LWlucHV0XCIpO1xuICAgICAgICBwcm9qZWN0SW5wdXRMYWJlbC50ZXh0Q29udGVudCA9IFwiUHJvamVjdCBOYW1lXCI7XG5cbiAgICAgICAgbGV0IHByb2plY3RTdWJtaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBwcm9qZWN0U3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIFwic3VibWl0LWJ1dHRvblwiKTtcbiAgICAgICAgcHJvamVjdFN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQWRkIFByb2plY3RcIjtcblxuICAgICAgICBwcm9qZWN0TW9kYWwuYXBwZW5kQ2hpbGQocHJvamVjdElucHV0TGFiZWwpO1xuICAgICAgICBwcm9qZWN0TW9kYWwuYXBwZW5kQ2hpbGQocHJvamVjdElucHV0KTtcbiAgICAgICAgcHJvamVjdE1vZGFsLmFwcGVuZENoaWxkKHByb2plY3RTdWJtaXRCdXR0b24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dUb2RvSXRlbU1vZGFsKHBhcmVudCkge1xuICAgICAgICBsZXQgdG9kb01vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdG9kb01vZGFsLnNldEF0dHJpYnV0ZShcImlkXCIsXCJ0b2RvLWZvcm1cIik7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0b2RvTW9kYWwpO1xuXG4gICAgICAgIGxldCB0b2RvVGl0bGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsYWJlbFwiKTtcbiAgICAgICAgdG9kb1RpdGxlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwidG9kby10aXRsZVwiKTtcbiAgICAgICAgdG9kb1RpdGxlTGFiZWwudGV4dENvbnRlbnQgPSBcIlRpdGxlXCI7XG4gICAgICAgIGxldCB0b2RvVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIHRvZG9UaXRsZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dFwiKTtcbiAgICAgICAgdG9kb1RpdGxlLnNldEF0dHJpYnV0ZShcImlkXCIsIFwidG9kby10aXRsZVwiKTtcblxuICAgICAgICBsZXQgdG9kb0Rlc2NyaXB0aW9uTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIHRvZG9EZXNjcmlwdGlvbkxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInRvZG8tZGVzY3JpcHRpb25cIik7XG4gICAgICAgIHRvZG9EZXNjcmlwdGlvbkxhYmVsLnRleHRDb250ZW50ID0gXCJEZXNjcmlwdGlvblwiO1xuICAgICAgICBsZXQgdG9kb0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICB0b2RvRGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgIHRvZG9EZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRvZG8tZGVzY3JpcHRpb25cIik7XG5cbiAgICAgICAgbGV0IHRvZG9EdWVEYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIHRvZG9EdWVEYXRlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIFwidG9kby1kYXRlXCIpO1xuICAgICAgICB0b2RvRHVlRGF0ZUxhYmVsLnRleHRDb250ZW50ID0gXCJEdWUgRGF0ZVwiO1xuICAgICAgICBsZXQgdG9kb0R1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIHRvZG9EdWVEYXRlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJkYXRlXCIpO1xuICAgICAgICB0b2RvRHVlRGF0ZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInRvZG8tZGF0ZVwiKTtcbiAgICAgICAgdG9kb0R1ZURhdGUuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIjIwMjQtMDEtMDFcIik7XG5cblxuICAgICAgICBsZXQgdG9kb1ByaW9yaXR5TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIHRvZG9Qcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBcInRvZG8tcHJpb3JpdHlcIik7XG4gICAgICAgIHRvZG9Qcmlvcml0eUxhYmVsLnRleHRDb250ZW50ID0gXCJQcmlvcml0eVwiO1xuICAgICAgICBsZXQgdG9kb1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgdG9kb1ByaW9yaXR5LnNldEF0dHJpYnV0ZShcImlkXCIsIFwidG9kby1wcmlvcml0eVwiKTtcbiAgICAgICAgbGV0IG9wdGlvbkxvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIHRvZG9Qcmlvcml0eS5hcHBlbmRDaGlsZChvcHRpb25Mb3cpO1xuICAgICAgICBvcHRpb25Mb3cudGV4dENvbnRlbnQgPSBcImxvd1wiO1xuICAgICAgICBsZXQgb3B0aW9uSGlnaCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIG9wdGlvbkhpZ2gudGV4dENvbnRlbnQgPSBcImhpZ2hcIlxuICAgICAgICB0b2RvUHJpb3JpdHkuYXBwZW5kQ2hpbGQob3B0aW9uSGlnaCk7XG5cblxuICAgICAgICBsZXQgdG9kb1N1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRvZG9TdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJzdWJtaXQtYnV0dG9uXCIpO1xuICAgICAgICB0b2RvU3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJBZGQgVG9kb1wiO1xuXG4gICAgICAgIHRvZG9Nb2RhbC5hcHBlbmRDaGlsZCh0b2RvVGl0bGVMYWJlbCk7XG4gICAgICAgIHRvZG9Nb2RhbC5hcHBlbmRDaGlsZCh0b2RvVGl0bGUpO1xuICAgICAgICB0b2RvTW9kYWwuYXBwZW5kQ2hpbGQodG9kb0Rlc2NyaXB0aW9uTGFiZWwpO1xuICAgICAgICB0b2RvTW9kYWwuYXBwZW5kQ2hpbGQodG9kb0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgdG9kb01vZGFsLmFwcGVuZENoaWxkKHRvZG9EdWVEYXRlTGFiZWwpO1xuICAgICAgICB0b2RvTW9kYWwuYXBwZW5kQ2hpbGQodG9kb0R1ZURhdGUpO1xuICAgICAgICB0b2RvTW9kYWwuYXBwZW5kQ2hpbGQodG9kb1ByaW9yaXR5TGFiZWwpO1xuICAgICAgICB0b2RvTW9kYWwuYXBwZW5kQ2hpbGQodG9kb1ByaW9yaXR5KTtcbiAgICAgICAgdG9kb01vZGFsLmFwcGVuZENoaWxkKHRvZG9TdWJtaXRCdXR0b24pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gaGlkZVBvcHVwKCkge1xuICAgICAgIGxldCBjb250ZW50Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250ZW50XCIpO1xuICAgICAgICBjb250ZW50Qm94LnJlbW92ZUNoaWxkKGNvbnRlbnRCb3gubGFzdENoaWxkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVNYWluQ29udGFpbmVyKHBhcmVudCwgcHJvamVjdCkge1xuICAgICAgICBjbGVhckN1cnJlbnRQcm9qZWN0KHBhcmVudCk7XG4gICAgICAgIGRpc3BsYXlQcm9qZWN0SGVhZGVyKHBhcmVudCxwcm9qZWN0KTtcbiAgICAgICAgZGlzcGxheVRvZG9JdGVtcyhwYXJlbnQscHJvamVjdCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJtYWluY29udGFpbmVyIHVwZGF0ZWRcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0Q3VycmVudFByb2plY3QoY3VycmVudFByb2plY3QpIHtcbiAgICAgICAgbGV0IHByb2plY3ROb2RlTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJvamVjdFwiKTtcbiAgICAgICAgcHJvamVjdE5vZGVMaXN0LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiO1xuICAgICAgICB9KTtcbiAgICAgICBwcm9qZWN0Tm9kZUxpc3RbY3VycmVudFByb2plY3RdLnN0eWxlLmNvbG9yID0gXCJncmVlblwiO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHtkaXNwbGF5UHJvamVjdExpc3QsIHNob3dQcm9qZWN0TW9kYWwsc2hvd1RvZG9JdGVtTW9kYWwsIGhpZGVQb3B1cCwgdXBkYXRlTWFpbkNvbnRhaW5lciwgaGlnaGxpZ2h0Q3VycmVudFByb2plY3R9O1xufSkoKTtcblxuXG5leHBvcnQge1xuICAgIGRpc3BsYXlDb250cm9sbGVyLFxufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQge1Byb2plY3R9IGZyb20gXCIuL3Byb2plY3RcIjtcbmltcG9ydCB7dG9Eb30gZnJvbSBcIi4vL3RvZG9cIjtcbmltcG9ydCB7ZGlzcGxheUNvbnRyb2xsZXJ9IGZyb20gXCIuL2Rpc3BsYXlDb250cm9sbGVyXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuY29uc3QgY29udGVudEJveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudFwiKTtcbmNvbnN0IHByb2plY3RMaXN0Qm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWxpc3RcIik7XG5jb25zdCBtYWluQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLWNvbnRhaW5lclwiKTtcbmNvbnN0IGNyZWF0ZVByb2plY3RCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3QtYnV0dG9uXCIpO1xubGV0IHByb2plY3RBcnJheSA9IFtdO1xubGV0IGN1cnJlbnRQcm9qZWN0ID0gMDtcblxuY29uc29sZS5sb2coXCJzdGFydDpcIik7XG4vL2xvY2FsU3RvcmFnZS5jbGVhcigpO1xuaWYobG9jYWxTdG9yYWdlLmxlbmd0aCA8IDEpIHtcbiAgICBwcm9qZWN0QXJyYXlbMF0gPSBQcm9qZWN0KFwiR2VuZXJhbFwiKTtcbiAgICBwcm9qZWN0QXJyYXlbMV0gPSBQcm9qZWN0KFwiUHJvamVjdC0xXCIpO1xuICAgIHByb2plY3RBcnJheVsyXSA9IFByb2plY3QoXCJQcm9qZWN0LTJcIik7XG4gICAgXG4gICAgLy9leGFtcGxlIHByb2plY3RzIGFuZCB0b2RvIGl0ZW1zLCBvbmx5IGxvYWRlZCBpZiBsb2NhbHN0b3JhZ2UgaXMgZW1wdHlcbiAgICBcbiAgICBwcm9qZWN0QXJyYXlbMF0udG9kb0FycmF5WzBdID0gdG9EbyhcIkhvbWV3b3JrXCIsXCJGaW5pc2ggdGhlIFRvLWRvIFByb2plY3QgZnJvbSB0aGUgSlMgUGF0aCB1c2luZyB2YW5pbGxhIEpTLCBIVE1MIGFuZCBDU1NcIiwgXCIxNS4wNy4yMDIzXCIsXCJoaWdoXCIpO1xuICAgIHByb2plY3RBcnJheVswXS50b2RvQXJyYXlbMV0gPSB0b0RvKFwiUHJvamVjdFwiLFwiSW1wbGVtZW50IHh5IGZlYXR1cmVzXCIsIFwiMjAuMTEuMjAyM1wiLFwibG93XCIpO1xuICAgIHByb2plY3RBcnJheVsxXS50b2RvQXJyYXlbMF0gPSB0b0RvKFwiUmVhZGluZ1wiLFwiUmVhZCBhcnRpY2xlIHh6eVwiLCBcIjE1LjExLjIwMjRcIixcImxvd1wiKTtcbiAgICBwcm9qZWN0QXJyYXlbMl0udG9kb0FycmF5WzBdID0gdG9EbyhcIkFpcnBvcnQgcGlja3VwXCIsXCJQaWNrIHVwIE9kaW4gZnJvbSB0aGUgYWlycG9ydFwiLCBcIjExLjA4LjIwMjNcIixcImhpZ2hcIik7XG4gICAgLy91cGRhdGVMb2NhbFN0b3JhZ2UoKTtcbiAgICBjb25zb2xlLmxvZyhcImxvY2FsOiBcIiArIGxvY2FsU3RvcmFnZSk7XG4gICAgY29uc29sZS5sb2coXCJwcm9qZWN0OiBcIiArIHByb2plY3RBcnJheSk7XG59XG5sb2FkUHJvamVjdHNGcm9tTG9jYWxTdG9yYWdlKCk7XG5jb25zb2xlLmxvZyhwcm9qZWN0QXJyYXlbMF0ubmFtZSk7XG5cbmlmKHByb2plY3RBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS5sb2cocHJvamVjdEFycmF5Lmxlbmd0aCk7XG4gICAgZGlzcGxheUNvbnRyb2xsZXIuZGlzcGxheVByb2plY3RMaXN0KHByb2plY3RMaXN0Qm94LCBwcm9qZWN0QXJyYXkpO1xuICAgIGRpc3BsYXlDb250cm9sbGVyLnVwZGF0ZU1haW5Db250YWluZXIobWFpbkNvbnRhaW5lcixwcm9qZWN0QXJyYXlbMF0pO1xuICAgIGRpc3BsYXlDb250cm9sbGVyLmhpZ2hsaWdodEN1cnJlbnRQcm9qZWN0KGN1cnJlbnRQcm9qZWN0KTsgIFxufVxuXG5cblxuXG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKSB7XG4gICAgaWYoZS50YXJnZXQubWF0Y2hlcyhcIi5wcm9qZWN0XCIpKSB7XG4gICAgICAgIGxldCBudW0gPSBwYXJzZUludChlLnRhcmdldC5kYXRhc2V0LmtleSk7XG4gICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnVwZGF0ZU1haW5Db250YWluZXIobWFpbkNvbnRhaW5lcixwcm9qZWN0QXJyYXlbbnVtXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwieHl6OiBcIiArIHByb2plY3RBcnJheVtjdXJyZW50UHJvamVjdF0pO1xuICAgICAgICBjdXJyZW50UHJvamVjdCA9IG51bTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50IHByb2plY3QgaW5kZXg6IFwiICsgY3VycmVudFByb2plY3QpO1xuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5oaWdobGlnaHRDdXJyZW50UHJvamVjdChjdXJyZW50UHJvamVjdCk7XG4gICAgfVxufSk7XG5cbmNyZWF0ZVByb2plY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIm5ldyBwcm9qZWN0IGNsaWNrZWRcIik7XG4gICAgZGlzcGxheUNvbnRyb2xsZXIuc2hvd1Byb2plY3RNb2RhbChjb250ZW50Qm94KTtcblxuICAgIGNvbnN0IHN1Ym1pdFByb2plY3RCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1Ym1pdC1idXR0b25cIik7XG4gICAgc3VibWl0UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgcHJvamVjdE5hbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdC1pbnB1dFwiKTtcbiAgICAgICAgaWYocHJvamVjdE5hbWVJbnB1dC52YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgc2hvd0Vycm9yTWVzc2FnZShcInByb2plY3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgIHByb2plY3RBcnJheS5wdXNoKFByb2plY3QocHJvamVjdE5hbWVJbnB1dC52YWx1ZSkpO1xuICAgICAgICB1cGRhdGVMb2NhbFN0b3JhZ2UoKTtcbiAgICAgICAgY29uc29sZS5sb2cocHJvamVjdEFycmF5KTtcbiAgICAgICAgY3VycmVudFByb2plY3QgPSBwcm9qZWN0QXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIuZGlzcGxheVByb2plY3RMaXN0KHByb2plY3RMaXN0Qm94LCBwcm9qZWN0QXJyYXkpO1xuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci51cGRhdGVNYWluQ29udGFpbmVyKG1haW5Db250YWluZXIsIHByb2plY3RBcnJheVtjdXJyZW50UHJvamVjdF0pO1xuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5oaWRlUG9wdXAoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50IHByb2plY3QgaW5kZXg6IFwiICsgY3VycmVudFByb2plY3QpO1xuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5oaWdobGlnaHRDdXJyZW50UHJvamVjdChjdXJyZW50UHJvamVjdCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5tYWluQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGUpIHsgLy9kZWxldGUgYSBwcm9qZWN0XG4gICAgaWYoZS50YXJnZXQubWF0Y2hlcyhcIi5kZWxldGUtYnV0dG9uXCIpKSB7XG4gICAgICAgIGlmKGN1cnJlbnRQcm9qZWN0ID4gMCkge1xuICAgICAgICAgICAgcHJvamVjdEFycmF5LnNwbGljZShjdXJyZW50UHJvamVjdCwxKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2plY3RBcnJheSk7XG4gICAgICAgICAgICBjdXJyZW50UHJvamVjdCA9IDA7XG4gICAgICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5kaXNwbGF5UHJvamVjdExpc3QocHJvamVjdExpc3RCb3gscHJvamVjdEFycmF5KTtcbiAgICAgICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnVwZGF0ZU1haW5Db250YWluZXIobWFpbkNvbnRhaW5lcixwcm9qZWN0QXJyYXlbY3VycmVudFByb2plY3RdKTtcbiAgICAgICAgICAgIGRpc3BsYXlDb250cm9sbGVyLmhpZ2hsaWdodEN1cnJlbnRQcm9qZWN0KGN1cnJlbnRQcm9qZWN0KTtcbiAgICAgICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1haW5Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oZSkgeyAvLyBhZGQgdG9kbyB0byBhIHByb2plY3RcbiAgICBpZihlLnRhcmdldC5tYXRjaGVzKFwiI2FkZC10b2RvLWJ1dHRvblwiKSkge1xuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci5zaG93VG9kb0l0ZW1Nb2RhbChjb250ZW50Qm94KTtcbiAgICAgICAgY29uc3Qgc3VibWl0UHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VibWl0LWJ1dHRvblwiKTtcblxuICAgICAgICBzdWJtaXRQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBhZGRUb2RvSXRlbSgpO1xuICAgICAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIuaGlkZVBvcHVwKCk7XG4gICAgICAgICAgICBkaXNwbGF5Q29udHJvbGxlci51cGRhdGVNYWluQ29udGFpbmVyKG1haW5Db250YWluZXIsIHByb2plY3RBcnJheVtjdXJyZW50UHJvamVjdF0pO1xuICAgICAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSk7XG5cbm1haW5Db250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHsgXG4gICAgaWYoZS50YXJnZXQubWF0Y2hlcyhcIiN0b2RvLWRlbGV0ZVwiKSkgeyAvLyBkZWxldGUgYSB0b2RvIGl0ZW1cbiAgICAgICAgbGV0IGluZGV4ID0gcGFyc2VJbnQoZS50YXJnZXQuZGF0YXNldC5rZXkpO1xuICAgICAgICBwcm9qZWN0QXJyYXlbY3VycmVudFByb2plY3RdLnRvZG9BcnJheS5zcGxpY2UoaW5kZXgsMSk7XG4gICAgICAgIGRpc3BsYXlDb250cm9sbGVyLnVwZGF0ZU1haW5Db250YWluZXIobWFpbkNvbnRhaW5lcixwcm9qZWN0QXJyYXlbY3VycmVudFByb2plY3RdKTtcbiAgICAgICAgdXBkYXRlTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYoZS50YXJnZXQubWF0Y2hlcyhcIiN0b2RvLWNoZWNrXCIpKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHBhcnNlSW50KGUudGFyZ2V0LmRhdGFzZXQua2V5KTtcbiAgICAgICAgaWYoKHByb2plY3RBcnJheVtjdXJyZW50UHJvamVjdF0udG9kb0FycmF5W2luZGV4XS5jaGVja0JveCkudG9TdHJpbmcoKSA9PT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICBwcm9qZWN0QXJyYXlbY3VycmVudFByb2plY3RdLnRvZG9BcnJheVtpbmRleF0uY2hlY2tCb3ggPSBcInRydWVcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb2plY3RBcnJheVtjdXJyZW50UHJvamVjdF0udG9kb0FycmF5W2luZGV4XS5jaGVja0JveCA9IFwiZmFsc2VcIjtcbiAgICAgICAgfVxuICAgICAgICBkaXNwbGF5Q29udHJvbGxlci51cGRhdGVNYWluQ29udGFpbmVyKG1haW5Db250YWluZXIscHJvamVjdEFycmF5W2N1cnJlbnRQcm9qZWN0XSk7XG4gICAgICAgIHVwZGF0ZUxvY2FsU3RvcmFnZSgpO1xuICAgIH1cblxuXG59KTtcblxuXG5cbmZ1bmN0aW9uIGFkZFRvZG9JdGVtKCkge1xuICAgIGxldCBpbnB1dFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2RvLXRpdGxlXCIpLnZhbHVlO1xuICAgIGxldCBpbnB1dERlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2RvLWRlc2NyaXB0aW9uXCIpLnZhbHVlO1xuICAgIGxldCBpbnB1dER1ZURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZG8tZGF0ZVwiKS52YWx1ZTtcbiAgICBsZXQgaW5wdXRQcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9kby1wcmlvcml0eVwiKS52YWx1ZTtcblxuICAgIGxldCBuZXdUb2RvSXRlbSA9IHRvRG8oaW5wdXRUaXRsZSxpbnB1dERlc2NyaXB0aW9uLGlucHV0RHVlRGF0ZSxpbnB1dFByaW9yaXR5KTtcbiAgICBwcm9qZWN0QXJyYXlbY3VycmVudFByb2plY3RdLnRvZG9BcnJheS5wdXNoKG5ld1RvZG9JdGVtKTtcbn1cblxuZnVuY3Rpb24gc2hvd0Vycm9yTWVzc2FnZShlbGVtZW50KSB7IC8vZXJyb3IgbWVzc2FnZSBmb3IgY3JlYXRpbmcgcHJvamVjdC90b2RvXG4gICAgbGV0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm1cIik7XG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZXJyb3JNZXNzYWdlLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwiZm9udC1zaXplOiAwLjhlbTsgY29sb3I6I2ZmMDAwMDtcIik7XG4gICAgaWYoZWxlbWVudCA9PT0gXCJwcm9qZWN0XCIpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gXCJQbGVhc2UgZW50ZXIgUHJvamVjdCBOYW1lXCI7XG4gICAgfVxuXG4gICAgZWxzZSBpZihlbGVtZW50ID09PSBcInRvZG9cIikge1xuICAgICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBcIlBsZWFzZSBmaWxsIG91dCBhbGwgZmllbGRzXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBcIkVycm9yXCI7XG4gICAgfVxuICAgIG1vZGFsLmFwcGVuZENoaWxkKGVycm9yTWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRQcm9qZWN0c0Zyb21Mb2NhbFN0b3JhZ2UoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGl0ZW1Ub0NvbnZlcnQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbFN0b3JhZ2Uua2V5KGkpKTtcbiAgICAgICAgcHJvamVjdEFycmF5W2ldID0gSlNPTi5wYXJzZShpdGVtVG9Db252ZXJ0KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxvY2FsU3RvcmFnZSgpIHtcbiAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICBpZihwcm9qZWN0QXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcHJvamVjdEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShpLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0QXJyYXlbaV0pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsInAiLCJuYyIsIlByb2plY3QiLCJuYW1lIiwidG9kb0FycmF5IiwidG9EbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJjaGVja0JveCIsImRpc3BsYXlDb250cm9sbGVyIiwiZGlzcGxheVByb2plY3RMaXN0IiwicGFyZW50IiwicHJvamVjdEFycmF5IiwiaW5uZXJIVE1MIiwicHJvamVjdERpdiIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50Iiwic2hvd1Byb2plY3RNb2RhbCIsInByb2plY3RNb2RhbCIsInByb2plY3RJbnB1dCIsInByb2plY3RJbnB1dExhYmVsIiwicHJvamVjdFN1Ym1pdEJ1dHRvbiIsInNob3dUb2RvSXRlbU1vZGFsIiwidG9kb01vZGFsIiwidG9kb1RpdGxlTGFiZWwiLCJ0b2RvVGl0bGUiLCJ0b2RvRGVzY3JpcHRpb25MYWJlbCIsInRvZG9EZXNjcmlwdGlvbiIsInRvZG9EdWVEYXRlTGFiZWwiLCJ0b2RvRHVlRGF0ZSIsInRvZG9Qcmlvcml0eUxhYmVsIiwidG9kb1ByaW9yaXR5Iiwib3B0aW9uTG93Iiwib3B0aW9uSGlnaCIsInRvZG9TdWJtaXRCdXR0b24iLCJoaWRlUG9wdXAiLCJjb250ZW50Qm94IiwibGFzdENoaWxkIiwidXBkYXRlTWFpbkNvbnRhaW5lciIsInByb2plY3QiLCJjbGVhckN1cnJlbnRQcm9qZWN0IiwicHJvamVjdEhlYWRlciIsInByb2plY3ROYW1lIiwicHJvamVjdERlbGV0ZUJ1dHRvbiIsInByb2plY3RBZGRUb2RvQnV0dG9uIiwiZGlzcGxheVByb2plY3RIZWFkZXIiLCJjYXJkQ29udGFpbmVyIiwidG9kb0NhcmRJbmRleCIsImZvckVhY2giLCJ0b2RvQ2FyZCIsInRvZG9JdGVtIiwiaWNvbkRpdiIsInRvZG9DaGVja0ljb24iLCJkYXRhc2V0IiwidG9kb1RyYXNoSWNvbiIsImNyZWF0ZVRvZG9JdGVtIiwiY29uc29sZSIsImxvZyIsImJvcmRlckNvbG9yIiwiZGlzcGxheVRvZG9JdGVtcyIsImhpZ2hsaWdodEN1cnJlbnRQcm9qZWN0IiwiY3VycmVudFByb2plY3QiLCJwcm9qZWN0Tm9kZUxpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29sb3IiLCJsb2NhbHMiLCJwcm9qZWN0TGlzdEJveCIsIm1haW5Db250YWluZXIiLCJjcmVhdGVQcm9qZWN0QnV0dG9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJ1cGRhdGVMb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJjbGVhciIsInNldEl0ZW0iLCJpdGVtVG9Db252ZXJ0IiwiZ2V0SXRlbSIsInBhcnNlIiwibG9hZFByb2plY3RzRnJvbUxvY2FsU3RvcmFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYXRjaGVzIiwibnVtIiwicGFyc2VJbnQiLCJwcm9qZWN0TmFtZUlucHV0IiwidmFsdWUiLCJtb2RhbCIsImVycm9yTWVzc2FnZSIsInNob3dFcnJvck1lc3NhZ2UiLCJuZXdUb2RvSXRlbSIsImFkZFRvZG9JdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==